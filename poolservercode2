import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


public class PartialHTTP1Server extends Thread{
        public static class ClientHandler implements Runnable{
                private final Socket clientSocket;

                public ClientHandler(final Socket socket){
                        this.clientSocket = socket;
                }

                @Override
                public void run(){
                        Buffered Reader userInput = null;
                        DataOutputStream userOutput = null;

                        try{
                                userInput = new BufferedReader(new InputStreamReader(
                                                this.clientSocket.getInputStream()));
                                userOutput = new DataOutputStream(this.clientSocket.getOutputStream());
                                while(true){
                                        //read and reply to user
                                }
                        }catch(IOException ioe){
                                userInput.close();
                                userOutput.close();
                                this.clientSocket.close();
                        }try{
                                if(userInput != null){
                                        userInput.close();
                                }if(userOutput != null){
                                        userOutput.close();
                                }
                                this.clientSocket.close();
                                System.err.println("Lost connection to " + this.clientSocket.getRemoteSocketAddress());
                        }catch(IOException ioe2){
                                // Ignored
                        }
                }
        }

	public static void main(String[] args){
                if(args.length < 1){
                        // give user error message
                        System.exit(1);
                }
                int port = -1;
                try{
                        port = Integer.parseInt(args[0]);
                }catch(NumberFormatException nfe){
                        // give user error message
                        System.exit(1);
                }
                if(port <= 0 || port > 65536){
                        // give user error message
                        System.exit(1);
                }

                final PartialHTTP1Server server = new PartialHTTP1Server(port);

		//server.start();


        }
        private static void printUsage(){
                System.err.println("Echo server requires 1 argument: <Listen Port>");
        }

	private ServerSocket listenSocket;

	public PartialHTTP1Server(final int port){



		try{
                        this.listenSocket = new ServerSocket(port);
                }catch(IOException e){
                        System.err.println();
                        e.printStackTrace();
                        System.exit(1);
                }

		while(true){
                        try{
                                final Socket clientSocket = this.listenSocket.accept();
                                System.out.println("Accepted connection from " + clientSocket.getRemote>

				ExecutorService threadPool = new ThreadPoolExecutor(5, 50, 5000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(1));

                        }catch(SockeetTimeoutException te){
                                //
                        }catch(IOException ioe){
                                System.err.println(); // print something
                                Thread.yield();
                        }
                }
	}
}
