import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.nio.file.Files;
import java.util.Scanner;

public class PartialHTTP1Server{

	public static void main(String[] args){

		if(args.length < 1){
			// give user error message
			System.exit(1);
		}

		Socket socket = null;
		ServerSocket server = null;
		DataInputStream dis = null;
		DataOutputStream dos = null;

		int port = -1;

		try{
			port = Integer.parseInt(args[0]);
		}catch(NumberFormatException nfe){
			System.err.print("Integer values only");
			System.exit(1);
		}
		if(port <= 0 || port > 65536){
			System.err.print("Integer out of bounds");
			System.exit(1);
		}

		
		try {
			server = new ServerSocket(port);
			
			System.out.println("Server started");
			System.out.println("Waiting for a client ...");

			ExecutorService threadPool = null;

			while(true) {
				socket = server.accept();
				
				System.out.println("Client accepted");
				
				// setting input and output streams
				dis = new DataInputStream(socket.getInputStream());
				dos = new DataOutputStream(socket.getOutputStream());

				threadPool = new ThreadPoolExecutor(5, 50, 5000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(1));

				//try{
					//socket.setSoTimeout(5000);
					threadPool.execute(new ClientHandler(socket, dis, dos));
				//}catch(SocketTimeoutException ste){
				//	System.err.println("time out!");
				//}
			}
		}//catch(SocketTimeoutException ste){
		//	System.err.println("time out!");
		//}
		catch(IOException i) {

		}


		//final PartialHTTP1Server server = new PartialHTTP1Server(port);


		//server.start();


	}

	public static String handleUserInput(String input) {
		String response = "Default output";

		String command = null, resource = null, httpVersion = null;

		List<String> tokens = new ArrayList();
		StringTokenizer tokenizer = new StringTokenizer(input, " ");


		while (tokenizer.hasMoreElements()) {
			tokens.add(tokenizer.nextToken());
		}

		//Check number of tokesn
		if(tokens.size() != 3){
			response = "HTTP/1.0 400 Bad Request";
			return response;
		}

		command = tokens.get(0);
		resource = tokens.get(1);
		httpVersion = tokens.get(2);

		/*
		 * Handle http command
		 * Supported commands are GET, POST, and HEAD
		 * Unsupported commands are DELETE, PUT, LINK, and UNLINK
		 */
		boolean sendPayload = false;
		switch(command) {
		case "GET":
			sendPayload = true;
			break;
		case "POST":
			sendPayload = true;
			break;
		case "HEAD":
			break;
		case "DELETE":
			response = "HTTP/1.0 501 Not Implemented";
			return response;
		case "PUT":
			response = "HTTP/1.0 501 Not Implemented";
			return response;
		case "LINK":
			response = "HTTP/1.0 501 Not Implemented";
			return response;
		case "UNLINK":
			response = "HTTP/1.0 501 Not Implemented";
			return response;

		default:
			response = "HTTP/1.0 400 Bad Request";
			return response;
		}
		/*
		 * Handle resource
		 */

		/*
		 * Handle httpVersion
		 */
		File file;
		try{
			file = new File("./" + resource);

		}catch(Exception e){
			e.printStackTrace();
			response = "HTTP/1.0 404 Not Found";
			return response;
		}

		if(!file.exists()){
			response = "HTTP/1.0 404 Not Found";
			return response;
                }if(!file.canRead()){
			response = "HTTP/1.0 403 Forbidden";
			return response;
		}

		//does the file exist

		int minimumLength = 8;
		//System.out.println("http length: " + httpVersion.length());
		if(httpVersion.length() >= minimumLength) {
			if(httpVersion.substring(0, 5).equals("HTTP/")) {
				double versionNumber;
				try{
					versionNumber = Double.parseDouble(httpVersion.substring(5));
				}catch(NumberFormatException nfe){
					System.err.println("Bad Format");
					response = "HTTP/1.0 400 Bad Request";
					return response;
				}
				if(versionNumber <= 1.0) {

				}else {
					response = "HTTP/1.0 505 HTTP Version Not Supported";
					return response;
				}
			}
		}

		int typeIndex = resource.indexOf(".");
		String extension = resource.substring(typeIndex+1);
        	String content_type = "";
		System.out.println("extension: " + extension);
        	switch(extension) {
        		case "html":
			case "plain":
            			content_type = "text";
            			break;
        		case "gif":
			case "jpeg":
			case "png":
            			content_type = "image";
            			break;
        		case "octet-stream":
			case "pdf":
			case "x-gzip":
			case "zip":
            			content_type = "application";
        		default:
				response = "HTTP/1.0 400 Bad Request";
				return response;
        	}
		String combined_content_type = (content_type + "/" + extension);
		long content_length = file.length();
		long last_modified = file.lastModified();

		//Date date = new Date(TimeUnit.SECONDS.toMillis(last_modified));
		//Date date = new Date(last_modified * 1000);
		//Date date = new Date(last_modified);

		DateFormat df = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z");
		df.setTimeZone(TimeZone.getTimeZone("GMT"));
		//System.out.println("Current date and time in GMT: " + df.format(now));

		//df.setTimeZone(TimeZone.getTimeZone("IST"));
		//System.out.println("Current date and time in IST: " + df.format(now));

		response = "HTTP/1.0 200 OK\r\n"+
				"Content-Type: " + combined_content_type + "\r\n" +
				"Content-Length: " + content_length + "\r\n" +
				"Last-Modified: " + df.format(last_modified) + "\r\n" +
				"Content-Encoding: identity\r\n" +
				"Allow: GET, POST, HEAD\r\n"  +
				"Expires: Sat, 21 Jul 2021 11:00:00 GMT\r\n";

		if(sendPayload){
			try{
				//BufferedReader br = new BufferedReader(new FileREader(file));
				//String st;
				Scanner sc = new Scanner(file);
				sc.useDelimiter("\\Z");
				response += "\r\n" + sc.next();
			}catch(IOException ioe){
				//
			}
		}
		System.out.println(response);
		return response;
	}

	public static class ClientHandler implements Runnable{
		Socket socket;
		DataInputStream dis;
		DataOutputStream dos;
		ClientHandler(Socket socket, DataInputStream dis, DataOutputStream dos){
			this.socket = socket;
			this.dis = dis;
			this.dos = dos;
		}

		@Override
		public void run(){
			try{
				BufferedReader userInput = new BufferedReader(new InputStreamReader(dis));

				this.socket.setSoTimeout(5000);

				String input = userInput.readLine();
				String response = handleUserInput(input);

				dos.writeBytes(response);
				dos.flush();

			}catch(SocketTimeoutException ste){
				System.err.println("timed out!");
				try{
					dos.writeBytes("HTTP/1.0 408 Request Timeout");
				}catch(IOException ioe2){
					//
				}
			}catch(IOException ioe){
				System.err.println("BufferedReader fail");
			}

			try{
				this.dis.close();
				this.dos.close();
				this.socket.close();
			}catch(IOException e){
				e.printStackTrace();
			}
		}
	}

	private static void printUsage(){
		System.err.println("Echo server requires 1 argument: <Listen Port>");
	}
}
