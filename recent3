import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;



public class PartialHTTP1Server{

	
	public static void main(String[] args){
		
		if(args.length < 1){
			// give user error message
			System.exit(1);
		}
		
		Socket socket = null;
		ServerSocket server = null;
		DataInputStream dis = null;
		DataOutputStream dos = null;
		
		int port = -1;
		
		try{
			port = Integer.parseInt(args[0]);
		}catch(NumberFormatException nfe){
			System.err.print("Integer values only");
			System.exit(1);
		}
		if(port <= 0 || port > 65536){
			System.err.print("Integer out of bounds");
			System.exit(1);
		}

		
		try {
			server = new ServerSocket(port);
			
			System.out.println("Server started");
			System.out.println("Waiting for a client ...");

			ExecutorService threadPool = null;

			while(true) {
				socket = server.accept();
				
				System.out.println("Client accepted");
				
				// setting input and output streams
				dis = new DataInputStream(socket.getInputStream());
				dos = new DataOutputStream(socket.getOutputStream());

				threadPool = new ThreadPoolExecutor(5, 50, 5000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(1));

				//try{
					//socket.setSoTimeout(5000);
					threadPool.execute(new ClientHandler(socket, dis, dos));
				//}catch(SocketTimeoutException ste){
				//	System.err.println("time out!");
				//}
			}
		}//catch(SocketTimeoutException ste){
		//	System.err.println("time out!");
		//}
		catch(IOException i) {

		}
		
		
		//final PartialHTTP1Server server = new PartialHTTP1Server(port);


		//server.start();


	}

	public static String handleUserInput(String input) {
		String response = "Default output";
		
		String command = null, resource = null, httpVersion = null;
		
		List<String> tokens = new ArrayList();
		StringTokenizer tokenizer = new StringTokenizer(input, " ");
		
		
		while (tokenizer.hasMoreElements()) {
			tokens.add(tokenizer.nextToken());
		}

		//Check number of tokesn
		if(tokenizer.countTokens() != 3){
			System.out.println("didn't get Three tokens, got: " + tokens.size());

			response = "HTTP/1.0 400 Bad Request";
			return response;
		}

		command = tokens.get(0);
		resource = tokens.get(1);
		httpVersion = tokens.get(2);

		/*
		 * Handle http command
		 * Supported commands are GET, POST, and HEAD
		 * Unsupported commands are DELETE, PUT, LINK, and UNLINK
		 */

		switch(command) {
		case "GET":
			System.out.println("GET command");
			break;
		case "POST":
			System.out.println("POST command");
			break;
		case "HEAD":
			System.out.println("HEAD command");
			break;
		case "DELETE":
			System.out.println("DELETE command");
			response = "HTTP/1.0 501 Not Implemented";
			break;
		case "PUT":
			System.out.println("PUT command");
			response = "HTTP/1.0 501 Not Implemented";
			break;
		case "LINK":
			System.out.println("LINK command");
			response = "HTTP/1.0 501 Not Implemented";
			break;
		case "UNLINK":
			System.out.println("UNLINK command");
			response = "HTTP/1.0 501 Not Implemented";
			break;
		default:
			System.out.println("HTTP/1.0 Bad Request");
		}
		/*
		 * Handle resource
		 */

		/*
		 * Handle httpVersion
		 */

		int minimumLength = 8;

		if(httpVersion.length() >= minimumLength) {
			if(httpVersion.substring(0, 5).equals("HTTP/")) {
				try{
					double versionNumber = Double.parseDouble(httpVersion.substring(5));
				}catch(NumberFormatException nfe){
					System.err.println("Bad Format");
					response = "HTTP/1.0 Bad Request";
				}
				if(versionNumber <= 1.0) {

				}else {
					response = "HTTP/1.0 505 HTTP Version Not Supported";
				}
			}
		}

		return response;
	}

	public static class ClientHandler implements Runnable{
		Socket socket;
		DataInputStream dis;
		DataOutputStream dos;
		ClientHandler(Socket socket, DataInputStream dis, DataOutputStream dos){
			this.socket = socket;
			this.dis = dis;
			this.dos = dos;
		}

		@Override
		public void run(){
			try{
				BufferedReader userInput = new BufferedReader(new InputStreamReader(dis));

				this.socket.setSoTimeout(5000);

				String input = userInput.readLine();
				String response = handleUserInput(input);

			}catch(SocketTimeoutException ste){
				System.err.println("timed out!");
			}catch(IOException ioe){
				System.err.println("BufferedReader fail");
			}

			try{
				this.dis.close();
				this.dos.close();
				this.socket.close();
			}catch(IOException e){
				e.printStackTrace();
			}
		}
	}

	private static void printUsage(){
		System.err.println("Echo server requires 1 argument: <Listen Port>");
	}
}
