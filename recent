import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;


public class PartialHTTP1Server extends Thread{

	ExecutorService threadPool = null;

	public static class ClientHandler implements Runnable{
		private final Socket clientSocket;

		public ClientHandler(final Socket socket){
			this.clientSocket = socket;
		}

		@Override
		public void run(){
			BufferedReader userInput = null;
			DataOutputStream userOutput = null;

			try{
				userInput = new BufferedReader(new InputStreamReader(
						this.clientSocket.getInputStream()));
				userOutput = new DataOutputStream(this.clientSocket.getOutputStream());
				System.out.println(userInput.toString());
				System.out.println(userInput.lines());
				
				/*while(true){

					System.out.println("while connection with " + clientSocket.getRemoteSocketAddress());

					System.out.println("Reached run while loop");
					//read and reply to user
				}*/
			}catch(IOException ioe){
				try {
					userInput.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					userOutput.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					this.clientSocket.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}try{
				if(userInput != null){
					userInput.close();
				}if(userOutput != null){
					userOutput.close();
				}
				this.clientSocket.close();
				System.err.println("Lost connection to " + this.clientSocket.getRemoteSocketAddress());
			}catch(IOException ioe2){
				// Ignored
			}
		}
	}

	public static void main(String[] args){
		if(args.length < 1){
			// give user error message
			System.exit(1);
		}
		int port = -1;
		try{
			port = Integer.parseInt(args[0]);
		}catch(NumberFormatException nfe){
			// give user error message
			System.exit(1);
		}
		if(port <= 0 || port > 65536){
			// give user error message
			System.exit(1);
		}

		final PartialHTTP1Server server = new PartialHTTP1Server(port);

		//server.start();
		
	}
	private static void printUsage(){
		System.err.println("Echo server requires 1 argument: <Listen Port>");
	}

	private ServerSocket listenSocket;

	public PartialHTTP1Server(final int port){



		try{
			this.listenSocket = new ServerSocket(port);
		}catch(IOException e){
			System.err.println();
			e.printStackTrace();
			System.exit(1);
		}

		while(true){
			try{
				final Socket clientSocket = this.listenSocket.accept();
				//if(connected = false){ setsocket timeout} else {
			
				System.out.println("Accepted connection from " + clientSocket.getRemoteSocketAddress());

				threadPool = new ThreadPoolExecutor(5, 50, 5000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(1));
				threadPool.execute(new ClientHandler(clientSocket));
			}catch(SocketTimeoutException te){
				//
			}catch(IOException ioe){
				System.err.println(); // print something
				Thread.yield();
			}
		}
	}
}
