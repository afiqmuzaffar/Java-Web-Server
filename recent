import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;



public class PartialHTTP1Server{

	
	public static void main(String[] args){
		
		if(args.length < 1){
			// give user error message
			System.exit(1);
		}
		
		Socket socket = null;
		ServerSocket server = null;
		DataInputStream dis = null;
		DataOutputStream dos = null;
		
		int port = -1;
		
		try{
			port = Integer.parseInt(args[0]);
		}catch(NumberFormatException nfe){
			System.err.print("Integer values only");
			System.exit(1);
		}
		if(port <= 0 || port > 65536){
			System.err.print("Integer out of bounds");
			System.exit(1);
		}

		
		try {
			server = new ServerSocket(port);
			
			System.out.println("Server started");
			System.out.println("Waiting for a client ...");

			ExecutorService threadPool = null;

			while(true) {
				socket = server.accept();
				
				System.out.println("Client accepted");
				
				// setting input and output streams
				dis = new DataInputStream(socket.getInputStream());
				dos = new DataOutputStream(socket.getOutputStream());

				threadPool = new ThreadPoolExecutor(5, 50, 5000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(1));
				threadPool.execute(new ClientHandler(socket, dis, dos));
				
				
				
			}
		}catch(IOException i) {
			
		}
		
		
		//final PartialHTTP1Server server = new PartialHTTP1Server(port);


		//server.start();


	}


	public static class ClientHandler implements Runnable{
		Socket socket;
		DataInputStream dis;
		DataOutputStream dos;

		public ClientHandler(Socket socket, DataInputStream dis, DataOutputStream dos){
			this.socket = socket;
			this.dis = dis;
			this.dos = dos;
		}

		@Override
		public void run(){
			try{
				BufferedReader userInput = new BufferedReader(new InputStreamReader(dis));
				
				String input = userInput.readLine();
				
//				String command, resource, http;
				
				
				
//TODO
				while(input != "\n\n") {
					input = userInput.readLine();
					//check for request format
				}
						
				
				
			}catch(IOException ioe){
				System.err.println("BufferedReader fail");
			}
			
			try{
				this.dis.close();
				this.dos.close();
				this.socket.close();
			}catch(IOException e){
				e.printStackTrace();
			}
		}
	}

	private static void printUsage(){
		System.err.println("Echo server requires 1 argument: <Listen Port>");
	}
}
