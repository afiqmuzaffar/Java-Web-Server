import java.net.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.io.*;

public class PartialHTTP1ServerCombo {

	public static void myGETRequest(String resource) throws IllegalArgumentException{
		//Invalid URL

		//Invalid file path

		//Invalid format

		//Check Date?
		throw new IllegalArgumentException();
	}

	public static void myPOSTRequest(String resource) throws IllegalArgumentException{
		throw new IllegalArgumentException();
	}

	public static void myHEADRequest(String resource) throws IllegalArgumentException{
		throw new IllegalArgumentException();
	}

	public static void main(String args[]){

		//initialize socket and input stream
		//removed private modifiers
		Socket socket = null;
		ServerSocket server = null;
		DataInputStream din = null;
		DataOutputStream dos = null;

		ArrayList<Thread> thread_ids = new ArrayList<Thread>(50);

		try{
			server = new ServerSocket(Integer.parseInt(args[0]));
			System.out.println("Server started");

			System.out.println("Waiting for a client ...");

			while(true){

				boolean timer_condition = true;

				//Accept blocking call
				socket = server.accept();

				System.out.println("Client accepted");

				// setting input and output streams
				din = new DataInputStream(socket.getInputStream());
				dos = new DataOutputStream(socket.getOutputStream());

				System.out.println("Assigning new thread for this client");

				//thread_ids.add(new ClientHandler(socket, din, dos));

				if(!timer_condition) {
					break;
				}
				timer_condition = false;

			}

			System.out.println("Stopping Accept...");

			// close connection
			socket.close();
			din.close();
			dos.close();

		}catch(IOException i){
			System.out.println(i);
		}


		/*
		 * Read in command line input and make appropriate requests
		 */
		boolean isCommand=false, isResource=false, isHTTPVersion=false;

		String threadStr ="";

		List<String> tokens = new ArrayList<>();
		StringTokenizer tokenizer = new StringTokenizer(threadStr, " ");
		while (tokenizer.hasMoreElements()) {
			tokens.add(tokenizer.nextToken());
		}

		String command = "", resource = "", httpVersion ="";

		if(tokenizer.hasMoreElements()) {
			command = (String)tokenizer.nextElement().toString();
			isCommand = true;
		}
		if(tokenizer.hasMoreElements()) {
			resource = (String)tokenizer.nextElement().toString();
			isResource = true; 
		}
		if(tokenizer.hasMoreElements()) {
			httpVersion = (String)tokenizer.nextElement().toString();
			isHTTPVersion = true;
		}


		switch(command) {
		case "GET":
			System.out.println("GET command");
			myGETRequest(resource);
			break;
		case "POST":
			System.out.println("POST command");
			myPOSTRequest(resource);
			break;
		case "HEAD":
			System.out.println("HEAD command");
			myHEADRequest(resource);
			break;
		default:
			System.out.println("Unsupported command");
		}
	}

	class ClientHandler extends Thread{
		final DataInputStream dis;
		final DataOutputStream dos;
		final Socket socket;

		public ClientHandler(Socket socket, DataInputStream dis, DataOutputStream dos){
			this.socket = socket;
			this.dis = dis;
			this.dos = dos;
		}
		/*
		 * I put the try catch block in the run method to avoid errors
		 */
		@Override
		public void run(){
			//Does something
			try{
				this.dis.close();
				this.dos.close();
				this.socket.close();

			}catch(IOException e){
				e.printStackTrace();
			}
		}




		//terminate the thread:


	}

}
